# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'links': 'AlertLinks',
        'active': 'bool',
        'end_at': 'datetime',
        'end_position': 'AlertEndPosition',
        'id': 'str',
        'start_position': 'AlertEndPosition',
        'started_at': 'datetime',
        'type': 'AlertMsgEnum'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'links': '_links',
        'active': 'active',
        'end_at': 'endAt',
        'end_position': 'endPosition:',
        'id': 'id',
        'start_position': 'startPosition',
        'started_at': 'startedAt',
        'type': 'type'
    }

    def __init__(self, created_at=None, links=None, active=None, end_at=None, end_position=None, id=None, start_position=None, started_at=None, type=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._links = None
        self._active = None
        self._end_at = None
        self._end_position = None
        self._id = None
        self._start_position = None
        self._started_at = None
        self._type = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if links is not None:
            self.links = links
        if active is not None:
            self.active = active
        if end_at is not None:
            self.end_at = end_at
        if end_position is not None:
            self.end_position = end_position
        if id is not None:
            self.id = id
        if start_position is not None:
            self.start_position = start_position
        if started_at is not None:
            self.started_at = started_at
        if type is not None:
            self.type = type

    @property
    def created_at(self):
        """Gets the created_at of this Alert.  # noqa: E501

        Date when the resource has been created.  # noqa: E501

        :return: The created_at of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Alert.

        Date when the resource has been created.  # noqa: E501

        :param created_at: The created_at of this Alert.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def links(self):
        """Gets the links of this Alert.  # noqa: E501


        :return: The links of this Alert.  # noqa: E501
        :rtype: AlertLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Alert.


        :param links: The links of this Alert.  # noqa: E501
        :type: AlertLinks
        """

        self._links = links

    @property
    def active(self):
        """Gets the active of this Alert.  # noqa: E501


        :return: The active of this Alert.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Alert.


        :param active: The active of this Alert.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def end_at(self):
        """Gets the end_at of this Alert.  # noqa: E501


        :return: The end_at of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Alert.


        :param end_at: The end_at of this Alert.  # noqa: E501
        :type: datetime
        """

        self._end_at = end_at

    @property
    def end_position(self):
        """Gets the end_position of this Alert.  # noqa: E501


        :return: The end_position of this Alert.  # noqa: E501
        :rtype: AlertEndPosition
        """
        return self._end_position

    @end_position.setter
    def end_position(self, end_position):
        """Sets the end_position of this Alert.


        :param end_position: The end_position of this Alert.  # noqa: E501
        :type: AlertEndPosition
        """

        self._end_position = end_position

    @property
    def id(self):
        """Gets the id of this Alert.  # noqa: E501


        :return: The id of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alert.


        :param id: The id of this Alert.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def start_position(self):
        """Gets the start_position of this Alert.  # noqa: E501


        :return: The start_position of this Alert.  # noqa: E501
        :rtype: AlertEndPosition
        """
        return self._start_position

    @start_position.setter
    def start_position(self, start_position):
        """Sets the start_position of this Alert.


        :param start_position: The start_position of this Alert.  # noqa: E501
        :type: AlertEndPosition
        """

        self._start_position = start_position

    @property
    def started_at(self):
        """Gets the started_at of this Alert.  # noqa: E501

        Date  # noqa: E501

        :return: The started_at of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Alert.

        Date  # noqa: E501

        :param started_at: The started_at of this Alert.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def type(self):
        """Gets the type of this Alert.  # noqa: E501


        :return: The type of this Alert.  # noqa: E501
        :rtype: AlertMsgEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Alert.


        :param type: The type of this Alert.  # noqa: E501
        :type: AlertMsgEnum
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
