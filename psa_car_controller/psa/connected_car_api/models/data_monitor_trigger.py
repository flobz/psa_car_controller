# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataMonitorTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'str',
        'op': 'str',
        'value': 'object'
    }

    attribute_map = {
        'data': 'data',
        'op': 'op',
        'value': 'value'
    }

    def __init__(self, data=None, op=None, value=None):  # noqa: E501
        """DataMonitorTrigger - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._op = None
        self._value = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if op is not None:
            self.op = op
        if value is not None:
            self.value = value

    @property
    def data(self):
        """Gets the data of this DataMonitorTrigger.  # noqa: E501

        the left operand of the trigger function.  # noqa: E501

        :return: The data of this DataMonitorTrigger.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DataMonitorTrigger.

        the left operand of the trigger function.  # noqa: E501

        :param data: The data of this DataMonitorTrigger.  # noqa: E501
        :type: str
        """
        allowed_values = ["vehicle.alert", "vehicle.odometer", "vehicle.moving", "vehicle.running", "vehicle.engines.oil.temp", "vehicle.energy.level", "vehicle.energy.consumption", "vehicle.energy.autonomy", "vehicle.doorsState.lockedState", "vehicle.doorsState.opening", "vehicle.energy.charging.status", "vehicle.energy.charging.plugged", "vehicle.speed", "vehicle.autonomy", "vehicle.energy.fuel.level", "vehicle.energy.electric.level", "vehicle.new.trip", "passenger.seatbelt.unbuckled", "environment.air.temp"]  # noqa: E501
        if data not in allowed_values:
            raise ValueError(
                "Invalid value for `data` ({0}), must be one of {1}"  # noqa: E501
                .format(data, allowed_values)
            )

        self._data = data

    @property
    def op(self):
        """Gets the op of this DataMonitorTrigger.  # noqa: E501

        the operator of the trigger function.  # noqa: E501

        :return: The op of this DataMonitorTrigger.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this DataMonitorTrigger.

        the operator of the trigger function.  # noqa: E501

        :param op: The op of this DataMonitorTrigger.  # noqa: E501
        :type: str
        """
        allowed_values = ["eqaualsTo", "greaterThan", "lowerThan", "includedIn"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"  # noqa: E501
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def value(self):
        """Gets the value of this DataMonitorTrigger.  # noqa: E501

        the right operand of the trigger function.  # noqa: E501

        :return: The value of this DataMonitorTrigger.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DataMonitorTrigger.

        the right operand of the trigger function.  # noqa: E501

        :param value: The value of this DataMonitorTrigger.  # noqa: E501
        :type: object
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataMonitorTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataMonitorTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
