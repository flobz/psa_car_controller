# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Kinetic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acceleration': 'float',
        'moving': 'bool',
        'pace': 'float',
        'speed': 'float'
    }

    attribute_map = {
        'acceleration': 'acceleration',
        'moving': 'moving',
        'pace': 'pace',
        'speed': 'speed'
    }

    def __init__(self, acceleration=None, moving=None, pace=None, speed=None):  # noqa: E501
        """Kinetic - a model defined in Swagger"""  # noqa: E501

        self._acceleration = None
        self._moving = None
        self._pace = None
        self._speed = None
        self.discriminator = None

        if acceleration is not None:
            self.acceleration = acceleration
        if moving is not None:
            self.moving = moving
        if pace is not None:
            self.pace = pace
        if speed is not None:
            self.speed = speed

    @property
    def acceleration(self):
        """Gets the acceleration of this Kinetic.  # noqa: E501


        :return: The acceleration of this Kinetic.  # noqa: E501
        :rtype: float
        """
        return self._acceleration

    @acceleration.setter
    def acceleration(self, acceleration):
        """Sets the acceleration of this Kinetic.


        :param acceleration: The acceleration of this Kinetic.  # noqa: E501
        :type: float
        """

        self._acceleration = acceleration

    @property
    def moving(self):
        """Gets the moving of this Kinetic.  # noqa: E501


        :return: The moving of this Kinetic.  # noqa: E501
        :rtype: bool
        """
        return self._moving

    @moving.setter
    def moving(self, moving):
        """Sets the moving of this Kinetic.


        :param moving: The moving of this Kinetic.  # noqa: E501
        :type: bool
        """

        self._moving = moving

    @property
    def pace(self):
        """Gets the pace of this Kinetic.  # noqa: E501


        :return: The pace of this Kinetic.  # noqa: E501
        :rtype: float
        """
        return self._pace

    @pace.setter
    def pace(self, pace):
        """Sets the pace of this Kinetic.


        :param pace: The pace of this Kinetic.  # noqa: E501
        :type: float
        """

        self._pace = pace

    @property
    def speed(self):
        """Gets the speed of this Kinetic.  # noqa: E501


        :return: The speed of this Kinetic.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Kinetic.


        :param speed: The speed of this Kinetic.  # noqa: E501
        :type: float
        """

        self._speed = speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Kinetic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Kinetic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
