# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deprecation': 'AlertEndPosition',
        'href': 'Url',
        'hreflang': 'str',
        'name': 'str',
        'profile': 'str',
        'templated': 'bool',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'deprecation': 'deprecation',
        'href': 'href',
        'hreflang': 'hreflang',
        'name': 'name',
        'profile': 'profile',
        'templated': 'templated',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, deprecation=None, href=None, hreflang=None, name=None, profile=None, templated=None, title=None, type=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501

        self._deprecation = None
        self._href = None
        self._hreflang = None
        self._name = None
        self._profile = None
        self._templated = None
        self._title = None
        self._type = None
        self.discriminator = None

        if deprecation is not None:
            self.deprecation = deprecation
        self.href = href
        if hreflang is not None:
            self.hreflang = hreflang
        if name is not None:
            self.name = name
        if profile is not None:
            self.profile = profile
        if templated is not None:
            self.templated = templated
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def deprecation(self):
        """Gets the deprecation of this Link.  # noqa: E501


        :return: The deprecation of this Link.  # noqa: E501
        :rtype: AlertEndPosition
        """
        return self._deprecation

    @deprecation.setter
    def deprecation(self, deprecation):
        """Sets the deprecation of this Link.


        :param deprecation: The deprecation of this Link.  # noqa: E501
        :type: AlertEndPosition
        """

        self._deprecation = deprecation

    @property
    def href(self):
        """Gets the href of this Link.  # noqa: E501


        :return: The href of this Link.  # noqa: E501
        :rtype: Url
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Link.


        :param href: The href of this Link.  # noqa: E501
        :type: Url
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def hreflang(self):
        """Gets the hreflang of this Link.  # noqa: E501

        Its value is a string which is a URI that hints about the profile (as defined by [I-D.wilde-profile-link](https://tools.ietf.org/html/draft-kelly-json-hal-08#ref-I-D.wilde-profile-link)) of the target resource.  # noqa: E501

        :return: The hreflang of this Link.  # noqa: E501
        :rtype: str
        """
        return self._hreflang

    @hreflang.setter
    def hreflang(self, hreflang):
        """Sets the hreflang of this Link.

        Its value is a string which is a URI that hints about the profile (as defined by [I-D.wilde-profile-link](https://tools.ietf.org/html/draft-kelly-json-hal-08#ref-I-D.wilde-profile-link)) of the target resource.  # noqa: E501

        :param hreflang: The hreflang of this Link.  # noqa: E501
        :type: str
        """

        self._hreflang = hreflang

    @property
    def name(self):
        """Gets the name of this Link.  # noqa: E501


        :return: The name of this Link.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Link.


        :param name: The name of this Link.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this Link.  # noqa: E501

        Its value is a string and is intended for indicating the language of the target resource (as defined by [RFC5988]).  # noqa: E501

        :return: The profile of this Link.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Link.

        Its value is a string and is intended for indicating the language of the target resource (as defined by [RFC5988]).  # noqa: E501

        :param profile: The profile of this Link.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def templated(self):
        """Gets the templated of this Link.  # noqa: E501

        SHOULD be true when the Link Object's \"href\"   property is a URI Template  # noqa: E501

        :return: The templated of this Link.  # noqa: E501
        :rtype: bool
        """
        return self._templated

    @templated.setter
    def templated(self, templated):
        """Sets the templated of this Link.

        SHOULD be true when the Link Object's \"href\"   property is a URI Template  # noqa: E501

        :param templated: The templated of this Link.  # noqa: E501
        :type: bool
        """

        self._templated = templated

    @property
    def title(self):
        """Gets the title of this Link.  # noqa: E501

        Its value is a string and is intended for labelling the link with a human-readable identifier (as defined by [RFC5988](https://tools.ietf.org/html/rfc5988)).  # noqa: E501

        :return: The title of this Link.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.

        Its value is a string and is intended for labelling the link with a human-readable identifier (as defined by [RFC5988](https://tools.ietf.org/html/rfc5988)).  # noqa: E501

        :param title: The title of this Link.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Link.  # noqa: E501

        a hint to indicate the media type  expected when dereferencing the target resource.  # noqa: E501

        :return: The type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.

        a hint to indicate the media type  expected when dereferencing the target resource.  # noqa: E501

        :param type: The type of this Link.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
