# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitorSubscribeRetryPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_retry_number': 'int',
        'policy': 'str',
        'retry_delay': 'int'
    }

    attribute_map = {
        'max_retry_number': 'maxRetryNumber',
        'policy': 'policy',
        'retry_delay': 'retryDelay'
    }

    def __init__(self, max_retry_number=None, policy=None, retry_delay=None):  # noqa: E501
        """MonitorSubscribeRetryPolicy - a model defined in Swagger"""  # noqa: E501

        self._max_retry_number = None
        self._policy = None
        self._retry_delay = None
        self.discriminator = None

        if max_retry_number is not None:
            self.max_retry_number = max_retry_number
        self.policy = policy
        if retry_delay is not None:
            self.retry_delay = retry_delay

    @property
    def max_retry_number(self):
        """Gets the max_retry_number of this MonitorSubscribeRetryPolicy.  # noqa: E501

        Maximum number of attempts (to be used with retryPolicy set to Bounded).  # noqa: E501

        :return: The max_retry_number of this MonitorSubscribeRetryPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_retry_number

    @max_retry_number.setter
    def max_retry_number(self, max_retry_number):
        """Sets the max_retry_number of this MonitorSubscribeRetryPolicy.

        Maximum number of attempts (to be used with retryPolicy set to Bounded).  # noqa: E501

        :param max_retry_number: The max_retry_number of this MonitorSubscribeRetryPolicy.  # noqa: E501
        :type: int
        """
        if max_retry_number is not None and max_retry_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_retry_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_retry_number = max_retry_number

    @property
    def policy(self):
        """Gets the policy of this MonitorSubscribeRetryPolicy.  # noqa: E501

        Defines the retry rules following a WebHook notification failure (ie the return code is not HTTP 2XX). '_None_' means with a single try, '_Bounded_' with a limited number of tries and '_Always_'  with an infinite number of tries.    # noqa: E501

        :return: The policy of this MonitorSubscribeRetryPolicy.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this MonitorSubscribeRetryPolicy.

        Defines the retry rules following a WebHook notification failure (ie the return code is not HTTP 2XX). '_None_' means with a single try, '_Bounded_' with a limited number of tries and '_Always_'  with an infinite number of tries.    # noqa: E501

        :param policy: The policy of this MonitorSubscribeRetryPolicy.  # noqa: E501
        :type: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Bounded", "Always"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"  # noqa: E501
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def retry_delay(self):
        """Gets the retry_delay of this MonitorSubscribeRetryPolicy.  # noqa: E501

        Time to wait (expressed in seconds) befor retrying to push a notification.  # noqa: E501

        :return: The retry_delay of this MonitorSubscribeRetryPolicy.  # noqa: E501
        :rtype: int
        """
        return self._retry_delay

    @retry_delay.setter
    def retry_delay(self, retry_delay):
        """Sets the retry_delay of this MonitorSubscribeRetryPolicy.

        Time to wait (expressed in seconds) befor retrying to push a notification.  # noqa: E501

        :param retry_delay: The retry_delay of this MonitorSubscribeRetryPolicy.  # noqa: E501
        :type: int
        """
        if retry_delay is not None and retry_delay < 1:  # noqa: E501
            raise ValueError("Invalid value for `retry_delay`, must be a value greater than or equal to `1`")  # noqa: E501

        self._retry_delay = retry_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorSubscribeRetryPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorSubscribeRetryPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
