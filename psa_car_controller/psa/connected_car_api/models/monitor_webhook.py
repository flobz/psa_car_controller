# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonitorWebhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'list[MonitorWebhookAttributes]',
        'name': 'str',
        'target': 'Url'
    }

    attribute_map = {
        'attributes': 'attributes',
        'name': 'name',
        'target': 'target'
    }

    def __init__(self, attributes=None, name=None, target=None):  # noqa: E501
        """MonitorWebhook - a model defined in Swagger"""  # noqa: E501

        self._attributes = None
        self._name = None
        self._target = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        self.name = name
        self.target = target

    @property
    def attributes(self):
        """Gets the attributes of this MonitorWebhook.  # noqa: E501

        Additional attributes-set that can be used as http header enhencement (such as headers can be used as an authentication parameter when posting the event) or simply added to the notification event body (as set of key/values) or finally as additional query parameters.   # noqa: E501

        :return: The attributes of this MonitorWebhook.  # noqa: E501
        :rtype: list[MonitorWebhookAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MonitorWebhook.

        Additional attributes-set that can be used as http header enhencement (such as headers can be used as an authentication parameter when posting the event) or simply added to the notification event body (as set of key/values) or finally as additional query parameters.   # noqa: E501

        :param attributes: The attributes of this MonitorWebhook.  # noqa: E501
        :type: list[MonitorWebhookAttributes]
        """

        self._attributes = attributes

    @property
    def name(self):
        """Gets the name of this MonitorWebhook.  # noqa: E501

        Webhook name.  # noqa: E501

        :return: The name of this MonitorWebhook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MonitorWebhook.

        Webhook name.  # noqa: E501

        :param name: The name of this MonitorWebhook.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def target(self):
        """Gets the target of this MonitorWebhook.  # noqa: E501


        :return: The target of this MonitorWebhook.  # noqa: E501
        :rtype: Url
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MonitorWebhook.


        :param target: The target of this MonitorWebhook.  # noqa: E501
        :type: Url
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorWebhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorWebhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
