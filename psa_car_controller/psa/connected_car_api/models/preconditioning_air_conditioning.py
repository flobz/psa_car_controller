# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PreconditioningAirConditioning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failure_cause': 'str',
        'programs': 'list[PreconditioningProgram]',
        'status': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'failure_cause': 'failureCause',
        'programs': 'programs',
        'status': 'status',
        'updated_at': 'updatedAt'
    }

    def __init__(self, failure_cause=None, programs=None, status=None, updated_at=None):  # noqa: E501
        """PreconditioningAirConditioning - a model defined in Swagger"""  # noqa: E501

        self._failure_cause = None
        self._programs = None
        self._status = None
        self._updated_at = None
        self.discriminator = None

        if failure_cause is not None:
            self.failure_cause = failure_cause
        if programs is not None:
            self.programs = programs
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def failure_cause(self):
        """Gets the failure_cause of this PreconditioningAirConditioning.  # noqa: E501

        failure cause  # noqa: E501

        :return: The failure_cause of this PreconditioningAirConditioning.  # noqa: E501
        :rtype: str
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause):
        """Sets the failure_cause of this PreconditioningAirConditioning.

        failure cause  # noqa: E501

        :param failure_cause: The failure_cause of this PreconditioningAirConditioning.  # noqa: E501
        :type: str
        """
        allowed_values = ["Defect", "DoorOpened", "LowBattery", "LowFuelLevel", "TooManyUnusedProg"]  # noqa: E501
        if failure_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_cause` ({0}), must be one of {1}"  # noqa: E501
                .format(failure_cause, allowed_values)
            )

        self._failure_cause = failure_cause

    @property
    def programs(self):
        """Gets the programs of this PreconditioningAirConditioning.  # noqa: E501


        :return: The programs of this PreconditioningAirConditioning.  # noqa: E501
        :rtype: list[PreconditioningProgram]
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """Sets the programs of this PreconditioningAirConditioning.


        :param programs: The programs of this PreconditioningAirConditioning.  # noqa: E501
        :type: list[PreconditioningProgram]
        """

        self._programs = programs

    @property
    def status(self):
        """Gets the status of this PreconditioningAirConditioning.  # noqa: E501

        The status of the preconditionning feature.   # noqa: E501

        :return: The status of this PreconditioningAirConditioning.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PreconditioningAirConditioning.

        The status of the preconditionning feature.   # noqa: E501

        :param status: The status of this PreconditioningAirConditioning.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enabled", "Disabled", "Finished", "Failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this PreconditioningAirConditioning.  # noqa: E501


        :return: The updated_at of this PreconditioningAirConditioning.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PreconditioningAirConditioning.


        :param updated_at: The updated_at of this PreconditioningAirConditioning.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreconditioningAirConditioning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreconditioningAirConditioning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
