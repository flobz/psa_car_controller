# coding: utf-8

"""
    Groupe PSA Connected Car - WEB API B2C

    *PSA B2C Connected Car API*  # Introduction This is the description of the *Groupe PSA Connected Car V2 API*. The speccification is  is based on **OpenAPI Specification version 3** and can be displayed via [ReDoc](https://github.com/Rebilly/ReDoc)a or [Swagger](http://swagger.io).   This API allows applications to fetch data from the connected Vehicles data platform. # Authentication PSA Connected Car APIs uses the [OAuth 2.0](https://tools.ietf.org/html/rfc6749) protocol for authentication and Authorization. any application require a valid [Access Token](https://tools.ietf.org/html/rfc6749#section-1.4) to access to user data. # Errors   Error codes returned by all REST APIs comply with the standard. Nevertheless, PSA Services (callers) need to have more complete data structures (even when the answer is not Http-OK) to better detail the type of error by providing application code, message and a debugging code(for investigation purposes). The http code of the response is managed by the protocol itself (in the header).      **Errors are  returned as a generic error response:**    * ```xError``` object model.       # noqa: E501

    OpenAPI spec version: 4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alerts': 'Link',
        'last_position': 'Link',
        'maintenance': 'Link',
        '_self': 'Link',
        'status': 'Link',
        'telemetry': 'Link',
        'trips': 'Link'
    }

    attribute_map = {
        'alerts': 'alerts',
        'last_position': 'lastPosition',
        'maintenance': 'maintenance',
        '_self': 'self',
        'status': 'status',
        'telemetry': 'telemetry',
        'trips': 'trips'
    }

    def __init__(self, alerts=None, last_position=None, maintenance=None, _self=None, status=None, telemetry=None, trips=None):  # noqa: E501
        """VehicleLinks - a model defined in Swagger"""  # noqa: E501

        self._alerts = None
        self._last_position = None
        self._maintenance = None
        self.__self = None
        self._status = None
        self._telemetry = None
        self._trips = None
        self.discriminator = None

        if alerts is not None:
            self.alerts = alerts
        if last_position is not None:
            self.last_position = last_position
        if maintenance is not None:
            self.maintenance = maintenance
        if _self is not None:
            self._self = _self
        if status is not None:
            self.status = status
        if telemetry is not None:
            self.telemetry = telemetry
        if trips is not None:
            self.trips = trips

    @property
    def alerts(self):
        """Gets the alerts of this VehicleLinks.  # noqa: E501


        :return: The alerts of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this VehicleLinks.


        :param alerts: The alerts of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self._alerts = alerts

    @property
    def last_position(self):
        """Gets the last_position of this VehicleLinks.  # noqa: E501


        :return: The last_position of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self._last_position

    @last_position.setter
    def last_position(self, last_position):
        """Sets the last_position of this VehicleLinks.


        :param last_position: The last_position of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self._last_position = last_position

    @property
    def maintenance(self):
        """Gets the maintenance of this VehicleLinks.  # noqa: E501


        :return: The maintenance of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this VehicleLinks.


        :param maintenance: The maintenance of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self._maintenance = maintenance

    @property
    def _self(self):
        """Gets the _self of this VehicleLinks.  # noqa: E501


        :return: The _self of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this VehicleLinks.


        :param _self: The _self of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self.__self = _self

    @property
    def status(self):
        """Gets the status of this VehicleLinks.  # noqa: E501


        :return: The status of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VehicleLinks.


        :param status: The status of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self._status = status

    @property
    def telemetry(self):
        """Gets the telemetry of this VehicleLinks.  # noqa: E501


        :return: The telemetry of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self._telemetry

    @telemetry.setter
    def telemetry(self, telemetry):
        """Sets the telemetry of this VehicleLinks.


        :param telemetry: The telemetry of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self._telemetry = telemetry

    @property
    def trips(self):
        """Gets the trips of this VehicleLinks.  # noqa: E501


        :return: The trips of this VehicleLinks.  # noqa: E501
        :rtype: Link
        """
        return self._trips

    @trips.setter
    def trips(self, trips):
        """Sets the trips of this VehicleLinks.


        :param trips: The trips of this VehicleLinks.  # noqa: E501
        :type: Link
        """

        self._trips = trips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
